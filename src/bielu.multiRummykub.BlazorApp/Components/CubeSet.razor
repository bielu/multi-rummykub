@if (Model.Cubes.Any())
{
    <div class="cubeSet @dropClass"
         ondragover="event.preventDefault();"
         ondragstart="event.dataTransfer.setData('', event.target.id);"
         @ondrop="HandleDrop"
         @ondragenter="HandleDragEnter"
         @ondragleave="HandleDragLeave">
        <div class="lock-action">
            @if (CurrentPlayerPersonalBoard != null)
            {
                if (!Model.Locked)
                {
                    <button @onclick="() => LockCubeSet(Model)">
                        <LockClosedIcon class="h-6 w-6 text-blue-500"/>
                    </button>
                }
                else
                {
                    <button @onclick="() => UnLockCubeSet(Model)">
                        <LockOpenIcon class="h-6 w-6 text-blue-500"/>
                    </button>
                }
            }
        </div>
        <Dropzone Items="Model.Cubes" >
            <Cube CurrentCube="@context"></Cube>
        </Dropzone>

    </div>
}

<style>
    .lock-action {
        position: absolute;
        top: -5px;
        right: 0;
    }
    
    .cubeSet.s {
        position: relative;
        padding: 20px;
    }
    
    .lock-action button {
        height: 20px;
        width: 20px;
        background: red;
        font-size: 0;
    }
</style>

@code {

    [Parameter]
    public Models.Table.CubeSet Model { get; set; }

    [Parameter]
    public Models.PersonalBoard.PersonalBoard? CurrentPlayerPersonalBoard { get; set; }

    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
    }

    string dropClass = "s";

    private void LockCubeSet(Models.Table.CubeSet cubeSet)
    {
        CurrentPlayerPersonalBoard.LockSets.Add(cubeSet);
        cubeSet.Locked = true;
        foreach (var cube in cubeSet.Cubes)
        {
            cube.Locked = true;
        }
    }

    private void UnLockCubeSet(Models.Table.CubeSet cubeSet)
    {
        CurrentPlayerPersonalBoard.LockSets.Remove(cubeSet);
        cubeSet.Locked = false;
        foreach (var cube in cubeSet.Cubes)
        {
            cube.Locked = false;
        }
    }

}