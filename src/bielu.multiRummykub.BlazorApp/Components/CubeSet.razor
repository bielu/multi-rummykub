@using Blazor.Heroicons
<div class="cubeSet @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('', event.target.id);"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">
    @if (CurrentPlayerPersonalBoard != null)
    {
        if (!Model.Locked)
        {
            <button @onclick="() => LockCubeSet(Model)"> <LockClosedIcon class="h-6 w-6 text-blue-500" /></button>
        }
        else
        {
            <button @onclick="() => UnLockCubeSet(Model)"> <LockOpenIcon class="h-6 w-6 text-blue-500" /></button>
        }
    }

    @foreach (var cube in Model.Cubes)
    {
        <Cube CurrentCube="cube"></Cube>
    }
</div>

@code {

    [Parameter]
    public Models.Table.CubeSet Model { get; set; }
    [Parameter]
    public Models.PersonalBoard.PersonalBoard? CurrentPlayerPersonalBoard { get; set; }

    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
    }

    string dropClass = "s";

    private void LockCubeSet(Models.Table.CubeSet cubeSet)
    {
        CurrentPlayerPersonalBoard.LockSets.Add(cubeSet);
        cubeSet.Locked = true;
        foreach (var cube in cubeSet.Cubes)
        {
            cube.Locked = true;
        }
    }

    private void UnLockCubeSet(Models.Table.CubeSet cubeSet)
    {
        CurrentPlayerPersonalBoard.LockSets.Remove(cubeSet);
        cubeSet.Locked = false;
        foreach (var cube in cubeSet.Cubes)
        {
            cube.Locked = false;
        }
    }


}